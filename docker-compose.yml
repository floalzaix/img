version: "3.8"

services:
  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: watermark-backend
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - watermark-network

  # Frontend Angular
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: watermark-frontend
    restart: unless-stopped
    networks:
      - watermark-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: watermark-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/ssl/certbot:/etc/letsencrypt:ro
      - ./nginx/certbot-webroot:/var/www/certbot:ro
    depends_on:
      - backend
      - frontend
    networks:
      - watermark-network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: watermark-certbot
    restart: unless-stopped
    volumes:
      - ./nginx/ssl/certbot:/etc/letsencrypt
      - ./nginx/certbot-webroot:/var/www/certbot
    command: >
      sh -c "
      sleep 10;
      if [ ! -f /etc/letsencrypt/live/img.floalz.fr/fullchain.pem ]; then
        echo 'Obtaining initial certificate...';
        certbot certonly --webroot --webroot-path=/var/www/certbot --email floalzfencing@gmail.com --agree-tos --no-eff-email --domains img.floalz.fr --non-interactive;
        echo 'Certificate obtained, reloading nginx...';
        docker kill -s HUP watermark-nginx;
      fi;
      trap exit TERM;
      while :; do
        certbot renew --webroot --webroot-path=/var/www/certbot --email floalzfencing@gmail.com --agree-tos --no-eff-email --domains img.floalz.fr --non-interactive;
        docker kill -s HUP watermark-nginx;
        sleep 12h & wait $${!};
      done;
      "
    depends_on:
      - nginx
    networks:
      - watermark-network

networks:
  watermark-network:
    driver: bridge

